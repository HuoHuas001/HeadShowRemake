name: Build

on:
  schedule:
  - cron: "5 0 * * 0"
  workflow_dispatch:
  push:
    branches:
      - main

env:
  PLUGIN_NAME: HeadShow
  VERSION_FILE_PATH: src/Version.h
  BUILD_CONFIGURATION: Release
  Platform: X64
  SDK_DIR: ./SDK
  RepoName: 'HuoHuas001/HeadShowRemake'
  ResourceId: '3405'
  BDS_VERSION: 1.19.83.01

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Catch BDS Version
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          curl -L -o ${{ env.SDK_DIR }}/Tools/LINK.txt "https://raw.githubusercontent.com/LiteLDev/LiteLoaderBDS/develop/scripts/LINK.txt"
          fileUrl=$(cat '${{ env.SDK_DIR }}/Tools/LINK.txt')
          fileVersion=${fileUrl##*-}
          bdsVersion=${fileVersion%.*}
        shell: bash


      - name: Download BDS
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          echo ${{vars.bdsVersion}}
          mkdir -p ${{ env.SDK_DIR }}/Tools/Server
          ServerLink=$(cat '${{ env.SDK_DIR }}/Tools/LINK.txt')
          curl -L -o ${{ env.SDK_DIR }}/Tools/Server/server.zip "$ServerLink"
          unzip ${{ env.SDK_DIR }}/Tools/Server/server.zip -d ${{ env.SDK_DIR }}/Tools/Server/ > /dev/null
        shell: bash

      - name: Build libraries
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          cd ${{ env.SDK_DIR }}\Tools
          PeEditor.exe -l --pdb ./Server/bedrock_server.pdb -o ../lib
        shell: cmd

      - name: Change PLUGIN_VERSION_STATUS_BETA
        working-directory: ${{env.GITHUB_WORKSPACE}}
        if: false == startsWith(github.ref, 'refs/tags/')
        run: |
          sed -r -i 's/#define\s+PLUGIN_VERSION_STATUS\s+PLUGIN_VERSION_\w+/#define PLUGIN_VERSION_STATUS   PLUGIN_VERSION_BETA/' ${{env.VERSION_FILE_PATH}}
          sed -r -i 's/#define\s+PLUGIN_VERSION_BUILD\s+.*/#define PLUGIN_VERSION_BUILD  ${{ github.run_number }}\r/' ${{env.VERSION_FILE_PATH}}
        shell: bash

      - name: Change PLUGIN_VERSION_STATUS_RELEASE
        working-directory: ${{env.GITHUB_WORKSPACE}}
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          sed -r -i 's/#define\s+PLUGIN_VERSION_STATUS\s+PLUGIN_VERSION_\w+/#define PLUGIN_VERSION_STATUS   PLUGIN_VERSION_RELEASE/' ${{env.VERSION_FILE_PATH}}
          sed -r -i 's/#define\s+PLUGIN_VERSION_BUILD\s+.*/#define PLUGIN_VERSION_BUILD  ${{ github.run_number }}\r/' ${{env.VERSION_FILE_PATH}}
        shell: bash

      - name: Configure CMake
        run: cmake -B ./ -DCMAKE_BUILD_TYPE=Release
        working-directory: ${{env.GITHUB_WORKSPACE}}

      - name: Build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        id: build
        run: 
          cmake --build ./ --config Release
        shell: bash

      - name: copy dll and pdb files
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          mkdir output/
          mkdir output/${{env.PLUGIN_NAME}}/
          mkdir output/${{env.PLUGIN_NAME}}/HeadShow/
          cp -f Release/*.dll output/${{env.PLUGIN_NAME}}/
          cp -f ./HeadShow/config.json output/${{env.PLUGIN_NAME}}/HeadShow/
          mkdir output/PDB/
          cp -f Release/*.pdb output/PDB/
          # mkdir output/${{env.PLUGIN_NAME}}/${{env.PLUGIN_NAME}}/
          # cp -r Data/* output/${{env.PLUGIN_NAME}}/${{env.PLUGIN_NAME}}/
        shell: bash

      - name: Pack Release
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        if: startsWith(github.ref, 'refs/tags/')
        run: 
          Compress-Archive -Path output\${{ env.PLUGIN_NAME }}\ plugins.zip
          Compress-Archive -Path output\PDB\ PDB.zip

      - name: Upload PLUGIN
        uses: actions/upload-artifact@v2
        with:
          name: plugins
          path: ${{ github.workspace }}\output\${{ env.PLUGIN_NAME }}

      - name: Upload PDB
        uses: actions/upload-artifact@v2
        with:
          name: PDB
          path: ${{ github.workspace }}\output\PDB

      - name: Get Time
        id: time
        uses: nanzm/get-time-action@v1.1
        if: github.repository == ${{env.RepoName}} && startsWith(github.ref, 'refs/tags/')
        with:
          timeZone: 8
          format: 'YYYY/MM/DD-HH:mm:ss'

      - name: Update MineBBS infomation
        uses: fjogeleit/http-request-action@v1
        if: success() && github.event_name == 'push' && github.repository == ${{env.RepoName}} && startsWith(github.ref, 'refs/tags/')
        with:
          url: 'https://api.minebbs.com/api/openapi/v1/resources/${{ env.ResourceId }}/update'
          method: 'POST'
          customHeaders: '{"Authorization": "Bearer ${{ secrets.MBKey }}"}'
          contentType: 'application/json'
          data: '{"title": "Update For ${{ env.BDS_VERSION }}", "description": "RT", "new_version": "${{ steps.time.outputs.time }}", "file_url": "https://github.com/HuoHuas001/HeadShowRemake/releases/latest"}'
          escapeData: 'true'
          preventFailureOnNoResponse: 'true'
          ignoreStatusCodes: '400,404,401,403,500,502,503,504'

